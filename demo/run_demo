#!/bin/bash

shopt -s nocasematch

cd $(dirname $0)

AGENT="$1"
AGENT_NAME="$2"
shift

if [ "$AGENT" = "coordinator" ]; then
	AGENT_MODULE="coordinator_validator"
	AGENT_PORT=8050
	AGENT_PORT_RANGE=8050-8058
	docker build -q -t "$AGENT" -f ../docker/Dockerfile_coordinator.demo --build-arg data_file="coordinator_validation_data" --build-arg hospital_name="Researcher With Validation Data" .. || exit 1

elif [ "$AGENT" = "hospital1" ]; then
	AGENT_MODULE="hospital"
	AGENT_PORT=8070
	AGENT_PORT_RANGE=8070-8078
	echo "Preparing agent image..."
	docker build -q -t "$AGENT" -f ../docker/Dockerfile_hospital.demo --build-arg data_file="$AGENT" --build-arg hospital_name="St Thomas's Hospital" .. || exit 1

elif [ "$AGENT" = "hospital2" ]; then
	AGENT_MODULE="hospital"
	AGENT_PORT=8090
	AGENT_PORT_RANGE=8090-8098
	echo "Preparing agent image..."
	docker build -q -t "$AGENT" -f ../docker/Dockerfile_hospital.demo --build-arg data_file="$AGENT" --build-arg hospital_name="St Bartholomew's Hospital" .. || exit 1
elif [ "$AGENT" = "hospital3" ]; then
	AGENT_MODULE="hospital"
	AGENT_PORT=8110
	AGENT_PORT_RANGE=8110-8118
    echo "Preparing agent image..."
	docker build -q -t "$AGENT" -f ../docker/Dockerfile_hospital.demo --build-arg data_file="$AGENT" --build-arg hospital_name="London Bridge Hospital" .. || exit 1
elif [ "$AGENT" = "nhsheadoffice" ]; then
	AGENT_MODULE="nhsheadoffice"
	AGENT_PORT=8080
	AGENT_PORT_RANGE=8080-8088
	echo "Preparing agent image..."
	docker build -q -t "$AGENT" -f ../docker/Dockerfile.demo .. || exit 1
elif [ "$AGENT" = "regulator" ]; then
	AGENT_MODULE="regulator"
	AGENT_PORT=8100
	AGENT_PORT_RANGE=8100-8108
	echo "Preparing agent image..."
	docker build -q -t "$AGENT" -f ../docker/Dockerfile.demo .. || exit 1
elif [ "$AGENT" = "coordinator_server" ]; then
	AGENT_MODULE="coordinator_server"
	AGENT_PORT=8130
	AGENT_PORT_RANGE=8130-8140
	docker build -q -t "$AGENT" -f ../docker/Dockerfile.demo .. || exit 1
elif [ "$AGENT" = "hospital1_web" ]; then
	AGENT_MODULE="hospital1_web"
	AGENT_PORT=8160
	AGENT_PORT_RANGE=8160-8170
	docker build -q -t "$AGENT" -f ../docker/Dockerfile.demo .. || exit 1
else
	echo "Please specify which agent you want to run. Choose from 'coordinator', 'hospital1', 'hospital2', 'hospital3', 'nhsheadoffice' or 'regulator'."
	exit 1
fi

# if [ -z "${PWD_HOST_FQDN}" ]; then
# 	DOCKERHOST=`docker run --rm --net=host codenvy/che-ip`
#     export RUNMODE="docker"
#
# Backup
#
#
if [ -z "${PWD_HOST_FQDN}" ]; then
	#if MacOS
	if [ $OSTYPE == 'darwin' ]; then
    export ETH_CONFIG="en0"
	MY_HOST=`ifconfig ${ETH_CONFIG} | awk 'FNR == 5  {print $2}'`
	#if Linux OS 
	elif [ $OSTYPE == 'linux-gnu' ]; then
	export ETH_CONFIG="ens33" #My VM's network card name is 'ens33'. Normally this should be 'eth0'.
	MY_HOST=`ifconfig ${ETH_CONFIG} | awk 'FNR == 2 {print $2}'`
	else
		echo 'Windows'
	fi

	# Commands derived from the following:
	#
	# if [[ "$OSTYPE" == "linux-gnu" ]]; then
	#         # ...
	# elif [[ "$OSTYPE" == "darwin"* ]]; then
	#         # Mac OSX
	# elif [[ "$OSTYPE" == "cygwin" ]]; then
	#         # POSIX compatibility layer and Linux environment emulation for Windows
	# elif [[ "$OSTYPE" == "msys" ]]; then
	#         # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
	# elif [[ "$OSTYPE" == "win32" ]]; then
	#         # I'm not sure this can happen.
	# elif [[ "$OSTYPE" == "freebsd"* ]]; then
	#         # ...
	# else
	#         # Unknown.
	# fi

	DOCKERHOST="${MY_HOST}"
    export RUNMODE="docker"
else
	PWD_HOST="${PWD_HOST_FQDN}"
    if [ "$PWD_HOST_FQDN" = "labs.play-with-docker.com" ]
      then
        export ETH_CONFIG="eth1"
      elif [ "$PWD_HOST_FQDN" = "play-with-docker.vonx.io" ]
      then
        export ETH_CONFIG="eth0"
      else
        export ETH_CONFIG="eth0"
      fi
    MY_HOST=`ifconfig ${ETH_CONFIG} | grep inet | cut -d':' -f2 | cut -d' ' -f1 | sed 's/\./\-/g'`
    export DOCKERHOST="ip${MY_HOST}-${SESSION_ID}-{PORT}.direct.${PWD_HOST_FQDN}"
    export RUNMODE="pwd"
fi

echo $DOCKERHOST

LEDGER_URL=http://dev.bcovrin.vonx.io
DOCKER_ENV="-e LOG_LEVEL=${LOG_LEVEL} -e RUNMODE=${RUNMODE} -e DOCKERHOST=${DOCKERHOST}"
if ! [ -z "$POSTGRES" ]; then
	DOCKER_ENV="${DOCKER_ENV} -e POSTGRES=1 -e RUST_BACKTRACE=1"
fi
if ! [ -z "$LEDGER_URL" ]; then
	GENESIS_URL="${LEDGER_URL}/genesis"
	DOCKER_ENV="${DOCKER_ENV} -e LEDGER_URL=${LEDGER_URL} -e GENESIS_URL=${GENESIS_URL}"
fi

if ! [ -z "$LEDGER" ]; then
	DOCKER_ENV="${DOCKER_ENV} -e LEDGER=${LEDGER}"
fi

# on Windows, docker run needs to be prefixed by winpty
if [ "$OSTYPE" = "msys" ]; then
	DOCKER="winpty docker"
fi
DOCKER=${DOCKER:-docker}

echo "Starting $AGENT..."
$DOCKER run --name $AGENT --rm -it \
	-p 0.0.0.0:$AGENT_PORT_RANGE:$AGENT_PORT_RANGE \
	$DOCKER_ENV \
	$AGENT $AGENT_MODULE --port $AGENT_PORT $@
